/*
 * Copyright(c) Beijing Kungeek Science & Technology Ltd.
 *
 */
package com.kungeek.ftsp.api.infrastructure.core.mvc.handler.requestargs;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.kungeek.ftsp.api.util.constants.FtspErrorCode;
import com.kungeek.ftsp.api.util.exception.FtspRequestException;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.MethodParameter;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.HandlerMethodArgumentResolver;
import org.springframework.web.method.support.ModelAndViewContainer;

import java.util.Iterator;

/**
 * FTSP JSON参数转换。
 * @version 3.1
 * @see FtspRequestJson
 * @see FtspCollectionJson
 */
public class FtspJsonMethodArgumentsResolver implements HandlerMethodArgumentResolver {

    private static final Logger logger = LoggerFactory.getLogger(FtspJsonMethodArgumentsResolver.class);

    @Autowired
    private ObjectMapper objectMapper;

    @Override
    public boolean supportsParameter(MethodParameter parameter) {
        return parameter.hasParameterAnnotation(FtspRequestJson.class) || parameter.hasParameterAnnotation(FtspCollectionJson.class);
    }

    @Override
    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,
                                  NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
        String objName;
        boolean isCollect = false;
        CollectionType listType = null;
        boolean isRequire;
        if (parameter.hasParameterAnnotation(FtspRequestJson.class)) {
            FtspRequestJson ftspRequestJson = parameter.getParameterAnnotation(FtspRequestJson.class);
            isRequire = ftspRequestJson.required();
            if (StringUtils.isNotEmpty(ftspRequestJson.value())) {
                objName = ftspRequestJson.value();
            } else {
                objName = parameter.getParameterName();
            }
        } else if (parameter.hasParameterAnnotation(FtspCollectionJson.class)) {
            FtspCollectionJson annotation = parameter.getParameterAnnotation(FtspCollectionJson.class);
            isRequire = annotation.required();
            if (StringUtils.isNotEmpty(annotation.value())) {
                objName = annotation.value();
            } else {
                objName = parameter.getParameterName();
            }

            if (annotation.collection() != parameter.getParameterType()) {
                logger.error("JSON转换的集合类型不符合");
                throw new RuntimeException("JSON转换的不是集合类型");
            }
            listType = objectMapper.getTypeFactory().constructCollectionType(annotation.collection(), annotation.element());
            isCollect = true;
        } else {
            throw new RuntimeException("FTSP JSON参数转换错误");
        }

        Object object = null;

        String paramName;
        for (Iterator<String> itr = webRequest.getParameterNames(); itr.hasNext(); ) {
            paramName = itr.next();
            if (paramName.equals(objName)) {
                if (StringUtils.isEmpty(webRequest.getParameterValues(paramName)[0])) {
                    if (!isRequire) {
                        return object;
                    }
                    throw new FtspRequestException(FtspErrorCode.CLIENT_PARAM_EMPTY, "参数[" + objName + "]不能为空");
                }
                try {

                    if (isCollect) {
                        object = objectMapper.readValue(webRequest.getParameterValues(paramName)[0], listType);
                    } else {
                        object = objectMapper.readValue(webRequest.getParameterValues(paramName)[0], parameter.getParameterType());
                    }
                } catch (Exception e) {
                    logger.error("FTSP JSON参数转换错误,参数名:{},参数值：{}", objName, webRequest.getParameterValues(paramName)[0]);
                    throw new FtspRequestException(FtspErrorCode.CLIENT_PARAM_JSON_ERROR, "参数[" + objName + "]不符合JSON规范");
                }
                return object;
            }
        }
        if (isRequire) {
            throw new FtspRequestException(FtspErrorCode.CLIENT_PARAM_EMPTY, "参数[" + objName + "]不存在");
        }
        return object;
    }
}
